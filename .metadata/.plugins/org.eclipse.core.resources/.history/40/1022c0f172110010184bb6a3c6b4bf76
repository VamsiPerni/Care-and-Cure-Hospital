package com.cac.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import com.cac.entity.Appointment;
import com.cac.entity.Doctor;


@Controller
public class DoctorController {
	
	private final String BASE_URL="http://localhost:8080";
	
	@Autowired
	private RestTemplate restTemplate;
	
	@GetMapping("/docHome")
	public String home() {
		return "home";
	}
	
	@GetMapping("/addDoctorForm")
	public String getAddDoctorForm(Model model) {
		model.addAttribute("doctor",new Doctor());
		return "addDoctor";
	}
	
	@PostMapping("/addDoctor")
	public String addDoctor(@ModelAttribute Doctor doctor, Model model) {
	    try {
			ResponseEntity<Doctor> response=restTemplate.postForEntity(BASE_URL +"/addDoctor", doctor, Doctor.class);
			model.addAttribute("message", "Doctor added successfully: "+response.getBody().getDoctorName().getFirstName());
			return "status";
		}
	    catch (Exception e) {
            model.addAttribute("error", "Failed to add Doctor, Please try again");
            return "status"; // Redirects back to addDoctorForm.html with an error
        }
    }
	    
	
	@GetMapping("/enterDoctorId")
    public String enterDoctorIdForm() {
        return "enterDoctorId"; // Renders enterDoctorId.html
    }

    // Step 2: Fetch Doctor details and show update form
    @GetMapping("/updateDoctorForm")
    public String updateDoctorForm(@RequestParam("doctorId") int doctorId, Model model) {
        try {
            ResponseEntity<Doctor> response = restTemplate.getForEntity(BASE_URL + "/viewDoctorById/" + doctorId, Doctor.class);
            model.addAttribute("doctor", response.getBody());
            return "updateDoctor"; // Renders updateDoctor.html
        } catch (Exception e) {
            model.addAttribute("error", "Doctor not found with ID: " + doctorId);
            return "enterDoctorId"; // Redirects back to enterDoctorId.html with an error
        }
    }

    // Step 3: Update Doctor details
    @PutMapping("/updateDoctor")
    public String updateDoctor(@RequestParam("doctorId") int doctorId, @ModelAttribute Doctor doctor, Model model) {
        try {
            restTemplate.put(BASE_URL + "/updateDoctor/" + doctorId, doctor);
            model.addAttribute("message", "Doctor updated successfully: " + doctor.getDoctorName().getFirstName());
        } catch (Exception e) {
            model.addAttribute("error", "Failed to update doctor. Please try again.");
        }
        return "updateDoctor"; // Renders updateMessage.html with success/error message
    }

	
	@GetMapping("/viewDoctorByIdForm")
	public String viewDoctorByIdForm() {
		return "viewDoctorByIdForm";
	}
	
	@GetMapping("/viewDoctorById")
	public String viewDoctorById(@RequestParam("doctorId") int doctorId, Model model) {
		try {
			ResponseEntity<Doctor> response=restTemplate.getForEntity(
			BASE_URL + "/viewDoctorById/" + doctorId, Doctor.class);
			model.addAttribute("doctor", response.getBody());
		}
		catch(Exception e) {
			e.printStackTrace();
			model.addAttribute("error", "Doctor not found with ID: "+doctorId);
		}
		return "viewDoctorById";
	}
	
	@GetMapping("/viewDoctorBySpecializationForm")
	public String viewDoctorBySpecializationForm() {
		return "viewDoctorBySpecializationForm";
	}

	@GetMapping("/viewDoctorBySpecializationFormPatientDashboard")
	public String viewDoctorBySpecializationFormPatientDashboard() {
		return "viewDoctorBySpecializationForm";
	}
	
	@GetMapping("/viewDoctorBySpecialization")
	public String viewDoctorBySpecialization(@RequestParam("specialization") String specialization, Model model) {
	    try {
	        ResponseEntity<List> response = restTemplate.getForEntity(
	            BASE_URL + "/viewDoctorBySpecialization/" + specialization, List.class);

	        List doctors = response.getBody();

	        if (doctors == null || doctors.isEmpty()) {
	            model.addAttribute("error", "No doctors found for specialization: " + specialization);
	        } else {
	            model.addAttribute("doctors", doctors);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        model.addAttribute("error", "No doctors found: " + specialization);
	    }
	    return "viewDoctorBySpecialization";
	}

	
	@GetMapping("/viewAllDoctors")
    public String viewAllDoctors(Model model) {
        ResponseEntity<List> response = restTemplate.getForEntity(
            BASE_URL + "/viewAllDoctors", List.class);

        model.addAttribute("doctors", response.getBody());
        return "viewAllDoctors"; // Renders viewAllDoctors.html
    }
	
	@GetMapping("/viewAllActiveDoctors")
    public String viewAllActiveDoctors(Model model) {
        ResponseEntity<List> response = restTemplate.getForEntity(
            BASE_URL + "/viewAllActiveDoctors", List.class);

        model.addAttribute("doctors", response.getBody());
        return "viewAllActiveDoctors"; // Renders viewAllDoctors.html
    }
	
	 @GetMapping("/viewDoctorAvailabilityBySlotForm")
	    public String viewDoctorAvailabilityBySlotForm() {
	        return "viewDoctorAvailabilityBySlotForm";
	    }

	 @GetMapping("/viewDoctorAvailabilityBySlot")
	 public String viewDoctorAvailabilityBySlot(
	         @RequestParam("availableSlots") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime availableSlots, 
	         Model model) {
	     try {
	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(
	             BASE_URL + "/viewDoctorAvailabilityBySlot/" + availableSlots, Doctor[].class);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No doctors available for the given slot: " + availableSlots);
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching doctor availability.");
	     }
	     return "viewDoctorAvailabilityBySlot";
	 }

	    
	 @GetMapping("/viewDoctorAvailabilityByDayForm")
	 public String viewDoctorAvailabilityByDayForm() {
	     return "viewDoctorAvailabilityByDayForm";
	 }

	 @GetMapping("/viewDoctorAvailabilityByDay")
	 public String viewDoctorAvailabilityByDay(
	         @RequestParam("availableSlots") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate availableSlots, 
	         Model model) {
	     try {
	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(
	             BASE_URL + "/viewDoctorAvailabilityByDay/" + availableSlots, Doctor[].class);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No doctors available for the given day: " + availableSlots);
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching doctor availability.");
	     }
	     return "viewDoctorAvailabilityByDay";
	 }

	    
	 @GetMapping("/viewDoctorsByConsultationCountForm")
	 public String viewDoctorsByConsultationCountForm() {
	     return "viewDoctorsByConsultationCountForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display results
	 @GetMapping("/viewDoctorsByConsultationCount")
	 public String viewDoctorsByConsultationCount(
	         @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
	         @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
	         @RequestParam("minCount") int minCount,
	         Model model) {
	     try {
	         // Use URI variables to prevent direct string concatenation
	         String url = BASE_URL + "/viewDoctorsByConsultationCount?startDate={startDate}&endDate={endDate}&minCount={minCount}";

	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(url, Doctor[].class, startDate, endDate, minCount);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No doctors found for the given criteria.");
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching doctor consultation count.");
	     }

	     return "viewDoctorsByConsultationCount"; // Thymeleaf template for displaying results
	 }

	 @GetMapping("/getDoctorRevenueReportForm")
	 public String getDoctorRevenueReportForm() {
	     return "getDoctorRevenueReportForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display revenue report
	 @GetMapping("/getDoctorRevenueReport")
	 public String getDoctorRevenueReport(
	         @RequestParam("doctorId") int doctorId,
	         @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
	         @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
	         Model model) {
	     try {
	         // Use URI parameters instead of directly appending them in the path
	         String url = BASE_URL + "/getDoctorRevenueReport/{doctorId}?startDate={startDate}&endDate={endDate}";

	         ResponseEntity<Double> response = restTemplate.getForEntity(url, Double.class, doctorId, startDate, endDate);

	         Double revenue = response.getBody();
	         if (revenue == null || revenue== 0.0) {
	             model.addAttribute("error", "Revenue report is not available for the given criteria.");
	         } else {
	             model.addAttribute("revenue", revenue);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching the revenue report.");
	     }
       
	     return "getDoctorRevenueReport"; // Thymeleaf template for displaying results
	 }


	    // Form to input start date and end date for low consultation doctors report
	 @GetMapping("/getLowConsultationDoctorsReportForm")
	 public String getLowConsultationDoctorsReportForm() {
	     return "getLowConsultationDoctorsReportForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display low consultation doctors report
	 @GetMapping("/getLowConsultationDoctorsReport")
	 public String getLowConsultationDoctorsReport(
	         @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
	         @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
	         Model model) {
	     try {
	         // Use query parameters instead of direct path variables
	         String url = BASE_URL + "/getLowConsultationDoctorsReport?startDate={startDate}&endDate={endDate}";

	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(url, Doctor[].class, startDate, endDate);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No doctors found with low consultations in the given period.");
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching the report.");
	     }

	     return "getLowConsultationDoctorsReport"; // Thymeleaf template for displaying results
	 }


	    // Form to input start date and end date for most frequently booked doctors report
	 
	 @GetMapping("/FrequentlyBookedDoctorsReportForm")
	 public String FrequentlyBookedDoctorsReportForm() {
	     return "FrequentlyBookedDoctorsReportForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display low consultation doctors report
	 @GetMapping("/getMostFrequentlyBookedDoctorsReport")
	 public String getMostFrequentlyBookedDoctorsReport(
	         @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
	         @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
	         Model model) {
	     try {
	         // Use query parameters instead of direct path variables
	    	 String url = BASE_URL + "/getMostFrequentlyBookedDoctorsReport?startDate=" + startDate + "&endDate=" + endDate;
	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(url, Doctor[].class, startDate, endDate);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No most frequently booked doctors found.");
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	         model.addAttribute("doctors", doctors);
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching the report.");
	     }

	     return "getMostFrequentlyBookedDoctorsReport"; // Thymeleaf template for displaying results
	 }


	    // Form to input date for doctor availability report
	 @GetMapping("/getDoctorAvailabilityReportForm")
	 public String getDoctorAvailabilityReportForm() {
	     return "getDoctorAvailabilityReportForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display doctor availability report
	 @GetMapping("/getDoctorAvailabilityReport")
	 public String getDoctorAvailabilityReport(
	         @RequestParam("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
	         Model model) {
	     try {
	         // Use query parameters instead of path variables
	         String url = BASE_URL + "/getDoctorAvailabilityReport?date={date}";

	         ResponseEntity<Doctor[]> response = restTemplate.getForEntity(url, Doctor[].class, date);

	         Doctor[] doctors = response.getBody();
	         if (doctors == null || doctors.length == 0) {
	             model.addAttribute("error", "No doctors are available on " + date);
	         } else {
	             model.addAttribute("doctors", doctors);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching the doctor availability report.");
	     }

	     return "getDoctorAvailabilityReport"; // Thymeleaf template for displaying results
	 }
	 
	 
	 
	 @GetMapping("/getDoctorAppointmentReportForm")
	 public String getDoctorAppointmentReportForm() {
	     return "getDoctorAppointmentReportForm"; // Thymeleaf template for the form
	 }

	 // Handle form submission and display revenue report
	 @GetMapping("/getDoctorAppointmentReport")
	 public String getDoctorAppointmentReport(
	         @RequestParam("doctorId") int doctorId,
	         @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
	         @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
	         Model model) {
	     try {
	         // Use URI parameters instead of directly appending them in the path
	         String url = BASE_URL + "/getDoctorAppointmentReport/{doctorId}?startDate={startDate}&endDate={endDate}";

	         ResponseEntity<Appointment[]> response = restTemplate.getForEntity(url, Appointment[].class, doctorId, startDate, endDate);
	         Appointment[] appointments = response.getBody();
	         if (appointments == null || appointments.length==0) {
	             model.addAttribute("error", "Appointments are not available");
	         } else {
	             model.addAttribute("appointments", appointments);
	         }
	     } catch (Exception e) {
	         e.printStackTrace();
	         model.addAttribute("error", "An error occurred while fetching the appointment report.");
	     }
       
	     return "getDoctorAppointmentReport"; // Thymeleaf template for displaying results
	 }

}
